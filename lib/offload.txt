import 'package:flutter/material.dart';
import 'package:glossy/glossy.dart';
import 'package:photo_manager/photo_manager.dart';
import 'package:photo_manager_image_provider/photo_manager_image_provider.dart';

class PhotosScreen extends StatefulWidget {
  const PhotosScreen({super.key});

  @override
  State<PhotosScreen> createState() => PhotosScreenState();
}

class PhotosScreenState extends State<PhotosScreen> {
  final scrollController = ScrollController();
  int page = 0, pageCount = 80;
  bool isLoadingMore = false; // Flag to prevent redundant calls

  @override
  void initState() {
    super.initState();
    scrollController.addListener(() {
      final maxScroll = scrollController.position.maxScrollExtent;
      final currentScroll = scrollController.position.pixels;

      // Check if user is at 70% and not already loading
      if (maxScroll > 0 && currentScroll >= 0.7 * maxScroll && !isLoadingMore) {
        isLoadingMore = true; // Block redundant calls

        setState(() {
          pageCount += 80; // Load more items
        });

        // Jump after the GridView rebuilds
        WidgetsBinding.instance.addPostFrameCallback((_) {
          final newMaxScroll = scrollController.position.maxScrollExtent;
          final previousMaxScroll = maxScroll;
          final scrollDelta = newMaxScroll - previousMaxScroll;

          // Adjust the scroll position to account for new items
          scrollController.jumpTo(currentScroll + scrollDelta);
          isLoadingMore = false;
        });
      }
    });
  }

  @override
  void dispose() {
    scrollController.dispose();
    PhotoCachingManager().cancelCacheRequest();
    super.dispose();
  }

  Future<List<AssetEntity>> loadMedia() async {
    final assetList = await PhotoManager.getAssetListPaged(
      page: page,
      pageCount: pageCount,
    );
    PhotoCachingManager().requestCacheAssets(
      assets: assetList,
      option: ThumbnailOption(
        size: ThumbnailSize.square(150),
        format: ThumbnailFormat.jpeg,
      ),
    );
    return assetList;
  }

  @override
  void didChangeDependencies() async{
    super.didChangeDependencies();
    final assets = await loadMedia();
    // Preload all thumbnails into Flutter's ImageCache
    for (var asset in assets) {
      precacheImage(
        AssetEntityImageProvider(
          asset,
          isOriginal: false,
          thumbnailSize: const ThumbnailSize.square(200),
        ),
        context,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Images in grid view
          Scrollbar(
            controller: scrollController,
            thumbVisibility: true,
            thickness: 8,
            interactive: true,
            radius: const Radius.circular(10),
            child: mediaGridBuilder(),
          ),

          // App bar
          GlossyContainer(
            height: MediaQuery.sizeOf(context).height * 0.08,
            width: MediaQuery.sizeOf(context).width,
            strengthX: 15,
            strengthY: 10,
            child: appBar(),
          ),
        ],
      ),
    );
  }

  Widget mediaGridBuilder() {
    return FutureBuilder(
      future: loadMedia(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return const Center(child: CircularProgressIndicator());
        } else if (snapshot.hasError) {
          return const Center(child: Text('Error loading images'));
        } else if (!snapshot.hasData || snapshot.data!.isEmpty) {
          return const Center(child: Text('No images found'));
        } else {
          final List<AssetEntity> images = snapshot.data!;
          return GridView.builder(
            addAutomaticKeepAlives: false,
            padding: EdgeInsets.fromLTRB(
              0,
              MediaQuery.sizeOf(context).height * 0.08,
              8,
              0,
            ),
            key: const PageStorageKey<String>('gridView'),
            physics: const BouncingScrollPhysics(),
            controller: scrollController,
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 4,
              childAspectRatio: 1.0,
            ),
            itemCount: images.length,
            itemBuilder: (context, index) {
              return Container(
                margin: const EdgeInsets.all(1.0),
                child: AssetEntityImage(
                  images[index],
                  fit: BoxFit.cover,
                  isOriginal: false,
                  thumbnailSize: const ThumbnailSize.square(
                    200,
                  ), // Preferred value.
                  thumbnailFormat: ThumbnailFormat.png,
                ),
              );
            },
          );
        }
      },
    );
  }

  Widget appBar() {
    return Container(
      color: Color.fromARGB(100, 255, 255, 255),
      padding: const EdgeInsets.fromLTRB(20, 10, 5, 10),
      child: Center(
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              'Photos',
              style: TextStyle(
                color: Colors.black,
                fontSize: 20,
                fontWeight: FontWeight.w700,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
